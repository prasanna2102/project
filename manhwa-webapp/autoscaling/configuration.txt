1.1. Create a Launch Template:
1. Go to the EC2 Dashboard → Launch Templates → Create Launch Template.
2.Fill in the template details:
3.Name: manhwa-webapp-launch-template.
4.AMI: Choose an appropriate AMI for your project (e.g., Ubuntu).
5.Instance type: Choose the instance type (e.g., t2.micro for low traffic or a larger instance for high traffic).
6.Key pair: Select or create a key pair to allow SSH access to the instances.
7.Security group: Create or use an existing security group that allows HTTP (port 80) and/or HTTPS (port 443) traffic, as well as MySQL access (port 3306).
8.Click Create Launch Template.
9.Step 2: Create an Auto Scaling Group
10.An Auto Scaling Group (ASG) maintains the desired number of EC2 instances. The group automatically adjusts the instance count according to the load and health checks.

2.1. Create an Auto Scaling Group:
1.Go to EC2 Dashboard → Auto Scaling Groups → Create Auto Scaling group.
2.Select the Launch Template created earlier.
3.Set the Auto Scaling Group Name (e.g., manhwa-asg).
4.Choose your VPC and Subnets. Make sure the subnets are in multiple Availability Zones (for redundancy).
5.Set desired, minimum, and maximum instances:
6.Desired capacity: 2 (this means 2 instances will be running).
7.Minimum capacity: 1 (minimum number of instances).
8.Maximum capacity: 4 (maximum number of instances).
9.Attach Load Balancer (Optional but recommended for scaling):
10.If you have a Load Balancer (e.g., Application Load Balancer), attach it to evenly distribute traffic across your instances. If you don’t have one yet, follow the next step to create one.
11.Enable health checks (use EC2 and ELB health checks to ensure unhealthy instances are replaced).
12.Click Create Auto Scaling Group.
Step 3: Create an Application Load Balancer (ALB)
An Application Load Balancer (ALB) helps distribute traffic across multiple instances and works well with Auto Scaling for a highly available application.

3.1. Create an Application Load Balancer:
Go to EC2 Dashboard → Load Balancers → Create Load Balancer → Application Load Balancer.
Set the following:
Name: manhwa-load-balancer.
Scheme: Internet-facing.
Listeners: HTTP (port 80) and optionally HTTPS (port 443).
Availability Zones: Select the same VPC and Subnets used in the Auto Scaling Group.
Configure the Security Group: Ensure it allows traffic on HTTP (port 80) and/or HTTPS (port 443).
Configure the Target Group:
Create a new Target Group for your Manhwa application (e.g., manhwa-target-group).
Set Target Type to Instances.
Health checks: Configure health checks on port 3000 (or whatever port your Node.js app runs on).
Review and create the Load Balancer.
Step 4: Configure Auto Scaling Policies
You can configure scaling policies to adjust the number of instances based on traffic or other metrics.

4.1. Scaling Policies Based on CPU Utilization:
Go to Auto Scaling Groups → Select your manhwa-asg → Scaling policies → Add policy.
Choose Target tracking scaling policy.
Set the scaling metric:
Metric type: Average CPU utilization.
Target value: Set this based on your desired load threshold, e.g., 50%.
This means if the average CPU utilization exceeds 50%, Auto Scaling will add more instances.
Click Create.
Step 5: Set Up Auto Scaling for Your RDS Database
Ensure that your AWS RDS (MySQL or other) instance can handle scaling. You may need to set up Read Replicas or enable Multi-AZ deployment to increase availability and performance.

5.1. Consider Using Read Replicas (Optional):
In the RDS console, create a Read Replica for your database.
This helps offload read queries from the primary database during high traffic, while the primary database handles writes.